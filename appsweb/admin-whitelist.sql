-- FRESH ADMIN WHITELIST SETUP
-- Clean install after clearing all data

-- DROP EXISTING TABLES IF THE EXIST FOR CLEAN INSTALL
DROP TABLE IF EXISTS public.profiles CASCADE;
DROP TABLE IF EXISTS public.admin_whitelist CASCADE;

-- CREATE TABLES FIRST
-- ADMIN WHITELIST TABLE
CREATE TABLE IF NOT EXISTS public.admin_whitelist (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email TEXT UNIQUE NOT NULL,
  name TEXT,
  role TEXT DEFAULT 'admin' NOT NULL,
  is_active BOOLEAN DEFAULT true NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- PROFILES TABLE
CREATE TABLE public.profiles (
  id UUID REFERENCES auth.users(id) ON DELETE CASCADE PRIMARY KEY,
  email TEXT UNIQUE NOT NULL,
  full_name TEXT,
  role TEXT DEFAULT 'attendee' NOT NULL,
  domain TEXT,
  college_id TEXT UNIQUE,
  avatar_url TEXT,
  password_set BOOLEAN DEFAULT false NOT NULL,
  password_last_changed TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ENABLE ROW LEVEL SECURITY
ALTER TABLE public.admin_whitelist ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- RLS POLICIES
-- Admin whitelist: Allow authenticated users to read (for verification)
DROP POLICY IF EXISTS "Allow authenticated users to read admin_whitelist" ON public.admin_whitelist;
CREATE POLICY "Allow authenticated users to read admin_whitelist" ON public.admin_whitelist
  FOR SELECT TO authenticated
  USING (true);

-- Profiles: Allow authenticated users full access
DROP POLICY IF EXISTS "Allow authenticated users to manage profiles" ON public.profiles;
CREATE POLICY "Allow authenticated users to manage profiles" ON public.profiles
  FOR ALL TO authenticated
  USING (true)
  WITH CHECK (true);

-- ADMIN VERIFICATION FUNCTION
CREATE OR REPLACE FUNCTION public.is_user_admin_secure(user_email TEXT DEFAULT null)
RETURNS BOOLEAN
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  email_to_check TEXT;
BEGIN
  -- Get email from JWT or parameter
  email_to_check := COALESCE(user_email, (auth.jwt() ->> 'email'));

  -- Check admin whitelist
  RETURN EXISTS (
    SELECT 1
    FROM public.admin_whitelist
    WHERE email = lower(email_to_check)
    AND is_active = true
    AND role = 'admin'
  );
END;
$$;

-- Grant execute permission
GRANT EXECUTE ON FUNCTION public.is_user_admin_secure(TEXT) TO authenticated;

-- TRIGGER FUNCTION FOR NEW USERS
CREATE OR REPLACE FUNCTION public.handle_new_user_and_set_role()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  user_role TEXT;
BEGIN
  -- Determine user role based on admin whitelist
  IF public.is_user_admin_secure(NEW.email) THEN
    user_role := 'admin';
  ELSE
    user_role := 'attendee';
  END IF;

  -- Insert profile with determined role
  INSERT INTO public.profiles (
    id,
    email,
    role,
    full_name
  ) VALUES (
    NEW.id,
    NEW.email,
    user_role,
    COALESCE(NEW.raw_user_meta_data->>'full_name', NEW.raw_user_meta_data->>'name', '')
  );

  RETURN NEW;
END;
$$;

-- Drop and recreate trigger
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user_and_set_role();

-- INSERT TEST ADMIN DATA
INSERT INTO public.admin_whitelist (email, name, role, is_active) VALUES
  ('juniorsblr2024@gmail.com', 'Junior Admin', 'admin', true)
ON CONFLICT (email) DO UPDATE SET
  name = EXCLUDED.name,
  role = EXCLUDED.role,
  is_active = EXCLUDED.is_active;

-- TEST THE FUNCTION
-- SELECT public.is_user_admin_secure('juniorsblr2024@gmail.com'); -- Should return true
