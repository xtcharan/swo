-- ========= Table: houses =========
-- Stores the different houses in the college.
CREATE TABLE public.houses (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT NOT NULL UNIQUE,
    points INT DEFAULT 0 NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);
COMMENT ON TABLE public.houses IS 'Stores the different houses in the college (e.g., Red, Blue).';


-- ========= Table: admin_whitelist =========
-- Pre-approved list of admin emails.
CREATE TABLE public.admin_whitelist (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email TEXT NOT NULL UNIQUE,
    role TEXT NOT NULL CHECK (role IN ('admin', 'superadmin')) DEFAULT 'admin',
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);
COMMENT ON TABLE public.admin_whitelist IS 'Pre-approved list of admin emails and their roles.';


-- ========= Table: profiles =========
-- The final version of the user profiles table, supporting all onboarding and personalization flows.
CREATE TABLE public.profiles (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,

    -- Essential Details (from Onboarding Form)
    first_name TEXT,
    last_name TEXT,
    email TEXT UNIQUE, -- For notifications (Students) or login/notifications (Guests)
    phone_number TEXT,
    department TEXT,
    "year" INT,
    college_name TEXT, -- Specifically for Guests/External users

    -- DBC Student Specific Identifier
    register_number TEXT UNIQUE, -- Can be NULL for guests. This is the primary identifier for students.

    -- System & Role Management
    role TEXT NOT NULL DEFAULT 'student'::text,
    attendee_type TEXT NOT NULL DEFAULT 'internal'::text CHECK (attendee_type IN ('internal', 'external')),

    -- Personalization Details (from optional "Polish Profile" screen)
    username TEXT UNIQUE, -- e.g., @JohnDoe25
    avatar_url TEXT, -- URL to the user's profile picture
    interests TEXT[], -- Array of text, e.g., {'Sports', 'Tech', 'Music'}

    -- Foreign Key Relationships
    house_id UUID REFERENCES public.houses(id) ON DELETE SET NULL,

    -- Timestamps
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);
COMMENT ON TABLE public.profiles IS 'Stores all user data. Linked to auth.users. Contains fields for both DBC Students and Guests.';


-- ========= Table: groups =========
-- Stores academic groups, clubs, etc.
CREATE TABLE public.groups (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT NOT NULL,
    description TEXT,
    group_type TEXT NOT NULL CHECK (group_type IN ('academic', 'club', 'sports_house')),
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    house_id UUID REFERENCES public.houses(id) ON DELETE SET NULL UNIQUE
);
COMMENT ON TABLE public.groups IS 'Stores academic groups, clubs, and sports houses.';


-- ========= Table: group_members =========
-- Linking table for profiles and groups.
CREATE TABLE public.group_members (
    user_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    group_id UUID NOT NULL REFERENCES public.groups(id) ON DELETE CASCADE,
    joined_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    PRIMARY KEY (user_id, group_id)
);
COMMENT ON TABLE public.group_members IS 'Tracks membership of users in various groups.';


-- ========= Table: events =========
-- Stores all events.
CREATE TABLE public.events (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT NOT NULL,
    description TEXT,
    event_date TIMESTAMPTZ,
    location TEXT,
    status TEXT NOT NULL DEFAULT 'draft' CHECK (status IN ('draft', 'published', 'archived', 'completed')),
    created_by UUID REFERENCES public.profiles(id) ON DELETE SET NULL,
    manager_id UUID REFERENCES public.profiles(id) ON DELETE SET NULL,
    event_type TEXT NOT NULL DEFAULT 'general' CHECK (event_type IN ('general', 'sports_day')),
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);
COMMENT ON TABLE public.events IS 'Stores all cultural, academic, and sports events.';


-- ========= Table: registrations =========
-- Tracks student registrations for events.
CREATE TABLE public.registrations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    event_id UUID NOT NULL REFERENCES public.events(id) ON DELETE CASCADE,
    registered_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    UNIQUE (user_id, event_id)
);
COMMENT ON TABLE public.registrations IS 'Tracks user sign-ups for events.';